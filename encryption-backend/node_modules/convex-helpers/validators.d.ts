import type { GenericValidator, ObjectType, PropertyValidators, VObject, VOptional, VString, VUnion, Validator } from "convex/values";
import type { Expand } from "./index.js";
import type { DataModelFromSchemaDefinition, GenericDatabaseReader, GenericDataModel, SchemaDefinition, TableNamesInDataModel } from "convex/server";
/**
 * Helper for defining a union of literals more concisely.
 *
 * e.g. `literals("a", 1, false)` is equivalent to
 * `v.union(v.literal("a"), v.literal(1), v.literal(false))`
 * To use with an array:
 * ```ts
 * const myLiterals = ["a", 1, false] as const;
 * const literalValidator = literals(...myLiterals)
 * ```
 * A similar result can be achieved with `v.union(...myLiterals.map(v.literal))`
 * however the type of each union member will be the union of literal types,
 * rather than each member being a specific literal type.
 *
 * @param args Values you want to use in a union of literals.
 * @returns A validator for the union of the literals.
 */
export declare const literals: <V extends string | number | boolean | bigint, T extends V[]>(...args: T) => VUnion<T[number], any>;
/**
 * nullable define a validator that can be the value or null more consisely.
 *
 * @param x The validator to make nullable. As in, it can be the value or null.
 * @returns A new validator that can be the value or null.
 */
export declare const nullable: <V extends Validator<any, "required", any>>(x: V) => VUnion<(V | import("convex/values").VNull<null, "required">)["type"], [import("convex/values").VNull<null, "required">, V], "required", (V | import("convex/values").VNull<null, "required">)["fieldPaths"]>;
/**
 * partial helps you define an object of optional validators more concisely.
 *
 * e.g. `partial({a: v.string(), b: v.number()})` is equivalent to
 * `{a: v.optional(v.string()), b: v.optional(v.number())}`
 *
 * @param obj The object of validators to make optional. e.g. {a: v.string()}
 * @returns A new object of validators that can be the value or undefined.
 */
export declare const partial: <T extends PropertyValidators>(obj: T) => { [K in keyof T]: VOptional<T[K]>; };
/** Any string value. */
export declare const string: VString<string, "required">;
/** JavaScript number, represented as a float64 in the database. */
export declare const number: import("convex/values").VFloat64<number, "required">;
/** JavaScript number, represented as a float64 in the database. */
export declare const float64: import("convex/values").VFloat64<number, "required">;
/** boolean value. For typing it only as true, use `l(true)` */
export declare const boolean: import("convex/values").VBoolean<boolean, "required">;
/** bigint, though stored as an int64 in the database. */
export declare const bigint: import("convex/values").VInt64<bigint, "required">;
/** bigint, though stored as an int64 in the database. */
export declare const int64: import("convex/values").VInt64<bigint, "required">;
/** Any Convex value */
export declare const any: import("convex/values").VAny<any, "required", string>;
/** Null value. Underscore is so it doesn't shadow the null builtin */
export declare const null_: import("convex/values").VNull<null, "required">;
/** Re-export values from v without having to do v.* */
export declare const id: <TableName extends string>(tableName: TableName) => import("convex/values").VId<import("convex/values").GenericId<TableName>, "required">, object: <T_2 extends PropertyValidators>(fields: T_2) => VObject<import("convex/server").Expand<{ [Property in { [Property_1 in keyof T_2]: T_2[Property_1]["isOptional"] extends "optional" ? Property_1 : never; }[keyof T_2]]?: Exclude<import("convex/values").Infer<T_2[Property]>, undefined> | undefined; } & { [Property_1 in Exclude<keyof T_2, { [Property in keyof T_2]: T_2[Property]["isOptional"] extends "optional" ? Property : never; }[keyof T_2]>]: import("convex/values").Infer<T_2[Property_1]>; }>, T_2, "required", { [Property_2 in keyof T_2]: Property_2 | `${Property_2 & string}.${T_2[Property_2]["fieldPaths"]}`; }[keyof T_2] & string>, array: <T_1 extends Validator<any, "required", any>>(element: T_1) => import("convex/values").VArray<T_1["type"][], T_1, "required">, bytes: () => import("convex/values").VBytes<ArrayBuffer, "required">, literal: <T extends string | number | bigint | boolean>(literal: T) => import("convex/values").VLiteral<T, "required">, optional: <T_4 extends GenericValidator>(value: T_4) => VOptional<T_4>, union: <T_3 extends Validator<any, "required", any>[]>(...members: T_3) => VUnion<T_3[number]["type"], T_3, "required", T_3[number]["fieldPaths"]>;
/** ArrayBuffer validator. */
export declare const arrayBuffer: import("convex/values").VBytes<ArrayBuffer, "required">;
/**
 * Utility to get the validators for fields associated with a table.
 * e.g. for systemFields("users") it would return:
 * { _id: v.id("users"), _creationTime: v.number() }
 *
 * @param tableName The table name in the schema.
 * @returns Validators for the system fields: _id and _creationTime
 */
export declare const systemFields: <TableName extends string>(tableName: TableName) => {
    _id: import("convex/values").VId<import("convex/values").GenericId<TableName>, "required">;
    _creationTime: import("convex/values").VFloat64<number, "required">;
};
export type SystemFields<TableName extends string> = ReturnType<typeof systemFields<TableName>>;
/**
 * Utility to add system fields to an object with fields mapping to validators.
 * e.g. withSystemFields("users", { name: v.string() }) would return:
 * { name: v.string(), _id: v.id("users"), _creationTime: v.number() }
 *
 * @param tableName Table name in the schema.
 * @param fields The fields of the table mapped to their validators.
 * @returns The fields plus system fields _id and _creationTime.
 */
export declare const withSystemFields: <TableName extends string, T extends Record<string, GenericValidator>>(tableName: TableName, fields: T) => Expand<T & {
    _id: import("convex/values").VId<import("convex/values").GenericId<TableName>, "required">;
    _creationTime: import("convex/values").VFloat64<number, "required">;
}>;
export type AddFieldsToValidator<V extends Validator<any, any, any>, Fields extends PropertyValidators> = V extends VObject<infer T, infer F, infer O> ? VObject<Expand<T & ObjectType<Fields>>, Expand<F & Fields>, O> : Validator<Expand<V["type"] & ObjectType<Fields>>, V["isOptional"], V["fieldPaths"] & {
    [Property in keyof Fields & string]: `${Property}.${Fields[Property]["fieldPaths"]}` | Property;
}[keyof Fields & string] & string>;
export declare const doc: <Schema extends SchemaDefinition<any, boolean>, TableName extends TableNamesInDataModel<DataModelFromSchemaDefinition<Schema>>>(schema: Schema, tableName: TableName) => AddFieldsToValidator<(typeof schema)["tables"][TableName]["validator"], SystemFields<TableName>>;
/**
 * Creates a validator with a type-safe `.id(table)` and a new `.doc(table)`.
 * Can be used instead of `v` for function arugments & return validators.
 * However, it cannot be used as part of defining a schema, since it would be
 * circular.
 * ```ts
 * import schema from "./schema";
 * export const vv = typedV(schema);
 *
 * export const myQuery = query({
 *   args: { docId: vv.id("mytable") },
 *   returns: vv.doc("mytable"),
 *   handler: (ctx, args) => ctx.db.get(args.docId),
 * })
 *
 * @param schema Typically from `import schema from "./schema"`.
 * @returns A validator like `v` with type-safe `v.id` and a new `v.doc`
 */
export declare function typedV<Schema extends SchemaDefinition<any, boolean>>(schema: Schema): {
    /**
     * Similar to v.id but is type-safe on the table name.
     * @param tableName A table named in your schema.
     * @returns A validator for an ID to the named table.
     */
    id: <TableName extends TableNamesInDataModel<DataModelFromSchemaDefinition<Schema>>>(tableName: TableName) => import("convex/values").VId<import("convex/values").GenericId<TableName>, "required">;
    /**
     * Generates a validator for a document, including system fields.
     * To be used in validators when passing a full document in or out of a
     * function.
     * @param tableName A table named in your schema.
     * @returns A validator that matches the schema validator, adding _id and
     * _creationTime. If the validator was a union, it will update all documents
     * recursively, but will currently lose the VUnion-specific type.
     */
    doc: <TableName extends TableNamesInDataModel<DataModelFromSchemaDefinition<Schema>>>(tableName: TableName) => AddFieldsToValidator<(typeof schema)["tables"][TableName]["validator"], SystemFields<TableName>>;
    null: () => import("convex/values").VNull<null, "required">;
    number: () => import("convex/values").VFloat64<number, "required">;
    float64: () => import("convex/values").VFloat64<number, "required">;
    bigint: () => import("convex/values").VInt64<bigint, "required">;
    int64: () => import("convex/values").VInt64<bigint, "required">;
    boolean: () => import("convex/values").VBoolean<boolean, "required">;
    string: () => VString<string, "required">;
    bytes: () => import("convex/values").VBytes<ArrayBuffer, "required">;
    literal: <T extends string | number | bigint | boolean>(literal: T) => import("convex/values").VLiteral<T, "required">;
    array: <T_1 extends Validator<any, "required", any>>(element: T_1) => import("convex/values").VArray<T_1["type"][], T_1, "required">;
    object: <T_2 extends PropertyValidators>(fields: T_2) => VObject<import("convex/server").Expand<{ [Property in { [Property_1 in keyof T_2]: T_2[Property_1]["isOptional"] extends "optional" ? Property_1 : never; }[keyof T_2]]?: Exclude<import("convex/values").Infer<T_2[Property]>, undefined> | undefined; } & { [Property_1 in Exclude<keyof T_2, { [Property in keyof T_2]: T_2[Property]["isOptional"] extends "optional" ? Property : never; }[keyof T_2]>]: import("convex/values").Infer<T_2[Property_1]>; }>, T_2, "required", { [Property_2 in keyof T_2]: Property_2 | `${Property_2 & string}.${T_2[Property_2]["fieldPaths"]}`; }[keyof T_2] & string>;
    record: <Key extends Validator<string, "required", any>, Value extends Validator<any, "required", any>>(keys: Key, values: Value) => import("convex/values").VRecord<Record<import("convex/values").Infer<Key>, Value["type"]>, Key, Value, "required", string>;
    union: <T_3 extends Validator<any, "required", any>[]>(...members: T_3) => VUnion<T_3[number]["type"], T_3, "required", T_3[number]["fieldPaths"]>;
    any: () => import("convex/values").VAny<any, "required", string>;
    optional: <T_4 extends GenericValidator>(value: T_4) => VOptional<T_4>;
};
/**
 * A string validator that is a branded string type.
 *
 * Read more at https://stack.convex.dev/using-branded-types-in-validators
 *
 * @param _brand - A unique string literal to brand the string with
 */
export declare const brandedString: <T extends string>(_brand: T) => VString<string & {
    _: T;
}>;
/** Mark fields as deprecated with this permissive validator typed as null */
export declare const deprecated: Validator<null, "optional">;
/** A maximally permissive validator that type checks as a given validator.
 *
 * If you want to have types that match some validator but you have invalid data
 * and you want to temporarily not validate schema for this field,
 * you can use this function to cast the permissive validator.
 *
 * Example in a schema:
 * ```ts
 * export default defineSchema({
 *   myTable: defineTable({
 *    myString: pretend(v.array(v.string())),
 *   }),
 * });
 * //...in some mutation
 * ctx.db.insert("myTable", { myString: 123 as any }); // no runtime error
 * ```
 * Example in function argument validation:
 * ```ts
 * const myQuery = defineQuery({
 *   args: { myNumber: pretend(v.number()) },
 *   handler: async (ctx, args) => {
 *     // args.myNumber is typed as number, but it's not validated.
 *     const num = typeof args.myNumber === "number" ?
 *       args.myNumber : Number(args.myNumber);
 *   },
 * });
 */
export declare const pretend: <T extends GenericValidator>(_typeToImmitate: T) => T;
/** A validator that validates as optional but type checks as required.
 *
 * If you want to assume a field is set for type checking, but your data may not
 * actually have it set for all documents (e.g. when adding a new field),
 * you can use this function to allow the field to be unset at runtime.
 * This is unsafe, but can be convenient in these situations:
 *
 * 1. You are developing locally and want to add a required field and write
 *   code assuming it is set. Once you push the code & schema, you can update
 *   the data to match before running your code.
 * 2. You are going to run a migration right after pushing code, and are ok with
 *   and you don't want to edit your code to handle the field being unset,
 *   your app being in an inconsistent state until the migration completes.
 *
 * This differs from {@link pretend} in that it type checks the inner validator,
 * if the value is provided.
 *
 * Example in a schema:
 * ```ts
 * export default defineSchema({
 *   myTable: defineTable({
 *    myString: pretendRequired(v.array(v.string())),
 *   }),
 * });
 * //...in some mutation
 * ctx.db.insert("myTable", { myString: undefined }); // no runtime error
 * ```
 * Example in function argument validation:
 * ```ts
 * const myQuery = defineQuery({
 *   args: { myNumber: pretendRequired(v.number()) },
 *   handler: async (ctx, args) => {
 *     // args.myNumber is typed as number, but it might be undefined
 *     const num = args.myNumber || 0;
 *   },
 * });
 */
export declare const pretendRequired: <T extends Validator<any, "required", any>>(optionalType: T) => T;
export declare class ValidationError extends Error {
    expected: string;
    got: string;
    path?: string | undefined;
    constructor(expected: string, got: string, path?: string | undefined);
}
/**
 * Validate a value against a validator.
 *
 * WARNING: This does not validate that v.id is an ID for the given table.
 * It only validates that the ID is a string. Function `args`, `returns` and
 * schema definitions will validate that the ID is an ID for the given table.
 *
 * @param validator The validator to validate against.
 * @param value The value to validate.
 * @returns Whether the value is valid against the validator.
 */
export declare function validate<T extends Validator<any, any, any>>(validator: T, value: unknown, opts?: {
    throw?: boolean;
    db?: GenericDatabaseReader<GenericDataModel>;
    _pathPrefix?: string;
}): value is T["type"];
//# sourceMappingURL=validators.d.ts.map